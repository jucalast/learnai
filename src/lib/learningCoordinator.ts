/**
 * Sistema Coordenado de Chat e Editor
 * Arquitetura: Observer Pattern + Command Pattern
 * Gerencia a intera√ß√£o sincronizada entre chat e editor
 */

import { GoogleGenerativeAI } from '@google/generative-ai';
import { 
  ChatMessage, 
  CodeExercise, 
  TeachingContext,
  TeachingAction,
  LearningTopic,
  CodeSnapshot,
  UserAssessment,
  SessionProgress
} from '@/types/learningSystem';

// Configura√ß√£o dual de IAs especializadas com chaves diferentes
const chatGenAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || '');
const codeGenAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY_SECONDARY || '');

// üó®Ô∏è IA especializada em conversa√ß√£o educativa (Chave 1 - NEXT_PUBLIC_GEMINI_API_KEY)
// Respons√°vel por: Chat, perguntas, respostas, explica√ß√µes, motiva√ß√£o
const chatAI = chatGenAI.getGenerativeModel({ 
  model: "gemini-1.5-flash",
  generationConfig: {
    temperature: 0.8, // Mais criativa para conversa√ß√£o natural
    maxOutputTokens: 500,
  }
});

// üë®‚Äçüíª IA especializada em c√≥digo e exerc√≠cios (Chave 2 - NEXT_PUBLIC_GEMINI_API_KEY_SECONDARY)  
// Respons√°vel por: Monitoramento de c√≥digo, exemplos, exerc√≠cios, an√°lise t√©cnica
const codeAI = codeGenAI.getGenerativeModel({ 
  model: "gemini-1.5-flash",
  generationConfig: {
    temperature: 0.4, // Balanceada para c√≥digo
    maxOutputTokens: 800,
  }
});

export interface LearningCoordinatorObserver {
  onChatMessage(message: ChatMessage): void;
  onCodeGenerated(code: string, explanation: string): void;
  onExerciseCreated(exercise: CodeExercise): void;
  onProgressUpdate(progress: SessionProgress): void;
}

/**
 * Coordenador principal que gerencia Chat + Editor
 */
export class LearningCoordinator {
  private observers: LearningCoordinatorObserver[] = [];
  private currentContext: TeachingContext | null = null;
  private conversationHistory: ChatMessage[] = [];
  private codeHistory: CodeSnapshot[] = [];
  private isProcessing = false;

  // Observer Pattern
  addObserver(observer: LearningCoordinatorObserver): void {
    this.observers.push(observer);
  }

  removeObserver(observer: LearningCoordinatorObserver): void {
    this.observers = this.observers.filter(obs => obs !== observer);
  }

  private notifyObservers<K extends keyof LearningCoordinatorObserver>(
    method: K, 
    ...args: Parameters<LearningCoordinatorObserver[K]>
  ): void {
    this.observers.forEach(observer => {
      (observer[method] as any)(...args);
    });
  }

  /**
   * Inicia uma nova sess√£o de aprendizado
   */
  async startLearningSession(
    assessment: UserAssessment,
    currentTopic: LearningTopic,
    sessionProgress: SessionProgress
  ): Promise<void> {
    this.currentContext = {
      userAssessment: assessment,
      currentTopic,
      sessionProgress,
      recentCodeHistory: [],
      recentChatHistory: [],
      userIdleTime: 0,
      strugglingIndicators: []
    };

    // Mensagem de boas-vindas personalizada
    const welcomeMessage = await this.generateWelcomeMessage();
    this.addChatMessage(welcomeMessage);

    // Gera primeiro exemplo/exerc√≠cio
    setTimeout(() => {
      this.generateTopicIntroduction();
    }, 2000);
  }

  /**
   * Processa mudan√ßas no c√≥digo do editor
   */
  async onCodeChange(code: string, language: string): Promise<void> {
    if (this.isProcessing || !this.currentContext) return;

    const codeSnapshot: CodeSnapshot = {
      id: Date.now().toString(),
      timestamp: new Date(),
      code,
      language,
      topicId: this.currentContext.currentTopic.id,
      isValid: this.validateCode(code),
      errors: this.analyzeCodeErrors(code),
      metrics: this.calculateCodeMetrics(code)
    };

    this.codeHistory.push(codeSnapshot);
    this.currentContext.recentCodeHistory = this.codeHistory.slice(-5);

    // Analisa se deve reagir ao c√≥digo
    const shouldReact = await this.shouldReactToCode(codeSnapshot);
    if (shouldReact) {
      const action = await this.generateCodeReaction(codeSnapshot);
      await this.executeTeachingAction(action);
    }
  }

  /**
   * Processa mensagens do usu√°rio no chat
   */
  async onUserMessage(userMessage: string): Promise<void> {
    if (!this.currentContext) return;

    console.log('üí¨ Processando mensagem do usu√°rio:', userMessage);

    // Adiciona mensagem do usu√°rio
    const userChatMessage: ChatMessage = {
      id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'user',
      content: userMessage,
      timestamp: new Date(),
      topicId: this.currentContext.currentTopic.id,
      messageType: 'question'
    };

    this.addChatMessage(userChatMessage);

    // Gera resposta da IA
    const aiResponse = await this.generateChatResponse(userMessage);
    this.addChatMessage(aiResponse);

    // Verifica se deve gerar c√≥digo/exerc√≠cio baseado na conversa
    const shouldGenerateCode = await this.shouldGenerateCodeFromChat(userMessage);
    console.log('ü§î Deve gerar c√≥digo?', shouldGenerateCode, 'para mensagem:', userMessage);
    
    if (shouldGenerateCode) {
      console.log('üë®‚Äçüíª Gerando c√≥digo em 1.5 segundos...');
      setTimeout(async () => {
        await this.generateCodeExample(userMessage);
      }, 1500);
    }
  }

  /**
   * Gera mensagem de boas-vindas personalizada
   */
  private async generateWelcomeMessage(): Promise<ChatMessage> {
    if (!this.currentContext) throw new Error('Contexto n√£o definido');
    
    const prompt = `
Voc√™ √© um tutor de programa√ß√£o amig√°vel. Crie uma mensagem de boas-vindas personalizada:

PERFIL DO ESTUDANTE:
- N√≠vel: ${this.currentContext.userAssessment.level}
- Linguagem: ${this.currentContext.userAssessment.language}
- Interesses: ${this.currentContext.userAssessment.interests.join(', ')}
- Objetivos: ${this.currentContext.userAssessment.goals.join(', ')}
- Estilo: ${this.currentContext.userAssessment.learningStyle}

T√ìPICO ATUAL: ${this.currentContext.currentTopic.title}

Crie uma mensagem:
1. Calorosa e motivadora
2. Que mencione o t√≥pico atual
3. Que conecte com os interesses do usu√°rio
4. M√°ximo 2-3 frases
5. Use 1-2 emojis apropriados

Responda apenas o texto da mensagem.`;

    try {
      const result = await chatAI.generateContent(prompt);
      return {
        id: `welcome_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        type: 'ai',
        content: result.response.text(),
        timestamp: new Date(),
        topicId: this.currentContext.currentTopic.id,
        messageType: 'introduction'
      };
    } catch (error) {
      console.error('Erro ao gerar mensagem de boas-vindas:', error);
      throw error;
    }
  }

  /**
   * Gera introdu√ß√£o do t√≥pico com exemplo de c√≥digo
   */
  private async generateTopicIntroduction(): Promise<void> {
    if (!this.currentContext) return;

    this.isProcessing = true;

    try {
      // 1. Mensagem explicativa no chat
      const explanationMessage = await this.generateTopicExplanation();
      this.addChatMessage(explanationMessage);

      // 2. Aguarda um pouco e gera c√≥digo de exemplo
      setTimeout(async () => {
        const codeExample = await this.generateTopicCodeExample();
        this.notifyObservers('onCodeGenerated', codeExample.code, codeExample.explanation);

        // 3. Mensagem incentivando a pr√°tica
        setTimeout(() => {
          const practiceMessage: ChatMessage = {
            id: Date.now().toString(),
            type: 'ai',
            content: 'Agora √© sua vez! Tente modificar o c√≥digo acima ou escreva seu pr√≥prio exemplo. Estou aqui para ajudar! üí°',
            timestamp: new Date(),
            topicId: this.currentContext!.currentTopic.id,
            messageType: 'encouragement'
          };
          this.addChatMessage(practiceMessage);
        }, 2000);
      }, 3000);

    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * Gera explica√ß√£o do t√≥pico para o chat
   */
  private async generateTopicExplanation(): Promise<ChatMessage> {
    if (!this.currentContext) throw new Error('Contexto n√£o definido');

    const prompt = `
Explique este t√≥pico de ${this.currentContext.userAssessment.language} de forma clara e motivadora:

T√ìPICO: ${this.currentContext.currentTopic.title}
DESCRI√á√ÉO: ${this.currentContext.currentTopic.description}
OBJETIVOS: ${this.currentContext.currentTopic.learningObjectives.join(', ')}
N√çVEL DO USU√ÅRIO: ${this.currentContext.userAssessment.level}
ESTILO DE APRENDIZADO: ${this.currentContext.userAssessment.learningStyle}

Crie uma explica√ß√£o:
1. Clara e acess√≠vel para o n√≠vel do usu√°rio
2. Que conecte com aplica√ß√µes pr√°ticas
3. Motivadora, mostrando a import√¢ncia do t√≥pico
4. 3-4 frases m√°ximo
5. Use linguagem conversacional
6. Mencione que vai mostrar um exemplo

Responda apenas o texto da explica√ß√£o.`;

    try {
      const result = await chatAI.generateContent(prompt);
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: result.response.text(),
        timestamp: new Date(),
        topicId: this.currentContext.currentTopic.id,
        messageType: 'explanation'
      };
    } catch (error) {
      console.error('Erro ao gerar explica√ß√£o:', error);
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: `Vamos aprender sobre ${this.currentContext.currentTopic.title}! Este conceito √© fundamental para programa√ß√£o.`,
        timestamp: new Date(),
        topicId: this.currentContext.currentTopic.id,
        messageType: 'explanation'
      };
    }
  }

  /**
   * Gera exemplo de c√≥digo INTELIGENTE para o t√≥pico
   */
  private async generateTopicCodeExample(): Promise<{ code: string; explanation: string }> {
    if (!this.currentContext) throw new Error('Contexto n√£o definido');

    const { userAssessment, currentTopic } = this.currentContext;
    const adaptiveLevel = userAssessment.adaptiveLevel || 'beginner';
    const generalLevel = userAssessment.generalProgrammingLevel || 'none';
    const languageLevel = userAssessment.languageSpecificLevel || 'none';

    console.log('üß† Gera√ß√£o INTELIGENTE de c√≥digo:', {
      adaptiveLevel,
      generalLevel,
      languageLevel,
      topic: currentTopic.title
    });

    const prompt = `
Crie um exemplo de c√≥digo ${userAssessment.language} INTELIGENTEMENTE ADAPTADO:

AN√ÅLISE INTELIGENTE DO USU√ÅRIO:
- N√≠vel Adaptativo: ${adaptiveLevel}
- Experi√™ncia Geral: ${generalLevel}  
- Conhecimento da Linguagem: ${languageLevel}
- Anos de Experi√™ncia: ${userAssessment.programmingExperienceYears || 0}

T√ìPICO: ${currentTopic.title}
OBJETIVOS: ${currentTopic.learningObjectives.join(', ')}
INTERESSES: ${userAssessment.interests.join(', ')}

${adaptiveLevel === 'intermediate_syntax' ? `
üéØ ESTRAT√âGIA: SINTAXE INTERMEDI√ÅRIA
O usu√°rio entende conceitos de programa√ß√£o, mas precisa aprender a sintaxe espec√≠fica de ${userAssessment.language}.

C√ìDIGO DEVE:
- Usar conceitos intermedi√°rios que ele j√° conhece (loops, condicionais, fun√ß√µes)
- Mostrar a sintaxe espec√≠fica de ${userAssessment.language}
- Ter coment√°rios explicando as diferen√ßas sint√°ticas
- Evitar explica√ß√µes b√°sicas de conceitos
- Focar em "como fazer em ${userAssessment.language}"
- 15-25 linhas de c√≥digo
- N√≠vel de complexidade: intermedi√°rio mas focado em sintaxe

EXEMPLO DE ABORDAGEM:
// Como fazer loops em ${userAssessment.language} (voc√™ j√° conhece o conceito)
// Estrutura de dados espec√≠fica de ${userAssessment.language}
// Sintaxe de fun√ß√µes em ${userAssessment.language}
` : adaptiveLevel === 'intermediate_concepts' ? `
üéØ ESTRAT√âGIA: CONCEITOS INTERMEDI√ÅRIOS
O usu√°rio tem base na linguagem e quer aprofundar conceitos.

C√ìDIGO DEVE:
- Usar conceitos intermedi√°rios espec√≠ficos da linguagem
- Mostrar padr√µes e melhores pr√°ticas
- Explicar o "porqu√™" al√©m do "como"
- 20-30 linhas de c√≥digo
- Incluir conceitos como OOP, estruturas de dados avan√ßadas
` : adaptiveLevel === 'advanced' ? `
üéØ ESTRAT√âGIA: CONCEITOS AVAN√áADOS
O usu√°rio √© experiente e quer t√≥picos complexos.

C√ìDIGO DEVE:
- Usar padr√µes avan√ßados e otimiza√ß√µes
- Mostrar c√≥digo profissional e eficiente
- Explicar trade-offs e decis√µes de design
- 25-40 linhas de c√≥digo
- Incluir conceitos como design patterns, performance
` : `
üéØ ESTRAT√âGIA: FUNDAMENTOS COMPLETOS
O usu√°rio √© iniciante total em programa√ß√£o.

C√ìDIGO DEVE:
- Come√ßar com conceitos muito b√°sicos
- Explicar cada linha detalhadamente
- Usar exemplos simples e pr√°ticos
- 8-15 linhas de c√≥digo
- Focar em entendimento gradual
`}

Requisitos:
1. C√≥digo claro e bem comentado em portugu√™s
2. Exemplo pr√°tico e relevante aos interesses
3. Apropriado para o n√≠vel adaptativo detectado
4. Coment√°rios explicativos espec√≠ficos para o n√≠vel

Responda em JSON:
{
  "code": "c√≥digo aqui",
  "explanation": "explica√ß√£o de 1-2 frases sobre o que o c√≥digo faz e por que √© apropriado para este n√≠vel"
}`;

    try {
      const result = await codeAI.generateContent(prompt);
      let responseText = result.response.text().replace(/```json|```/g, '').trim();
      
      // Tentar limpar a resposta se n√£o for JSON v√°lido
      if (!responseText.startsWith('{')) {
        const jsonStart = responseText.indexOf('{');
        const jsonEnd = responseText.lastIndexOf('}');
        if (jsonStart !== -1 && jsonEnd !== -1) {
          responseText = responseText.substring(jsonStart, jsonEnd + 1);
        }
      }
      
      const response = JSON.parse(responseText);
      
      console.log('‚úÖ C√≥digo INTELIGENTE gerado:', {
        linhas: response.code.split('\n').length,
        adaptiveLevel,
        hasComments: response.code.includes('#') || response.code.includes('//')
      });
      
      return response;
    } catch (error) {
      // Mostrar erro em vez de usar fallback silencioso
      if (error instanceof Error && error.message.includes('quota')) {
        console.error('‚ùå ERRO: Quota da API Gemini excedida!', error.message);
        throw new Error('Quota da API Gemini excedida. Limite de 50 requests/dia atingido.');
      } else {
        console.error('‚ùå ERRO ao gerar c√≥digo inteligente:', error);
        throw error; // Re-throw para que o erro seja propagado
      }
    }
  }

  /**
   * Gera resposta para mensagem do usu√°rio
   */
  private async generateChatResponse(userMessage: string): Promise<ChatMessage> {
    if (!this.currentContext) throw new Error('Contexto n√£o definido');

    const recentChat = this.conversationHistory.slice(-3).map(msg => 
      `${msg.type}: ${msg.content}`
    ).join('\n');

    const prompt = `
Voc√™ √© um tutor de programa√ß√£o conversando com um estudante.

CONTEXTO:
- T√≥pico atual: ${this.currentContext.currentTopic.title}
- N√≠vel do usu√°rio: ${this.currentContext.userAssessment.level}
- √öltimas mensagens:
${recentChat}

MENSAGEM DO USU√ÅRIO: "${userMessage}"

Responda como um tutor experiente:
1. Seja prestativo e encorajador
2. Responda diretamente √† pergunta/coment√°rio
3. Se for d√∫vida t√©cnica, explique claramente
4. Se precisar, sugira que vai mostrar exemplo no editor
5. Use linguagem conversacional e amig√°vel
6. M√°ximo 2-3 frases
7. Use emojis quando apropriado

Responda apenas o texto da resposta.`;

    try {
      const result = await chatAI.generateContent(prompt);
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: result.response.text(),
        timestamp: new Date(),
        topicId: this.currentContext.currentTopic.id,
        messageType: 'feedback'
      };
    } catch (error) {
      console.error('Erro ao gerar resposta:', error);
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: 'Entendi! Vou te ajudar com isso. üòä',
        timestamp: new Date(),
        topicId: this.currentContext.currentTopic.id,
        messageType: 'feedback'
      };
    }
  }

  /**
   * Verifica se deve gerar c√≥digo baseado na conversa
   */
  private async shouldGenerateCodeFromChat(userMessage: string): Promise<boolean> {
    const codeKeywords = [
      'exemplo', 'c√≥digo', 'mostrar', 'como fazer', 'demonstrar', 
      'n√£o entendi', 'explica', 'como', 'fazer', 'me d√™', 'me de',
      'gerar', 'criar', 'implementar', 'escrever', 'show', 'example',
      'pode mostrar', 'vou mostrar', 'tutorial', 'pr√°tica', 'exerc√≠cio'
    ];
    
    const shouldGenerate = codeKeywords.some(keyword => 
      userMessage.toLowerCase().includes(keyword)
    );
    
    console.log('üîç An√°lise de keywords:', {
      mensagem: userMessage,
      keywords: codeKeywords.filter(k => userMessage.toLowerCase().includes(k)),
      resultado: shouldGenerate
    });
    
    return shouldGenerate;
  }

  /**
   * Gera exemplo de c√≥digo baseado na conversa
   */
  private async generateCodeExample(userMessage: string): Promise<void> {
    if (!this.currentContext) return;

    console.log('üë®‚Äçüíª Iniciando gera√ß√£o de c√≥digo para:', userMessage);

    const chatMessage: ChatMessage = {
      id: `code_gen_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'ai',
      content: 'Deixe-me mostrar um exemplo no editor! üë®‚Äçüíª',
      timestamp: new Date(),
      topicId: this.currentContext.currentTopic.id,
      messageType: 'explanation'
    };

    this.addChatMessage(chatMessage);

    try {
      // Gera c√≥digo espec√≠fico para a pergunta
      const codeExample = await this.generateSpecificCodeExample(userMessage);
      
      console.log('‚úÖ C√≥digo gerado:', codeExample);
      
      setTimeout(() => {
        console.log('üì§ Enviando c√≥digo para o editor...');
        this.notifyObservers('onCodeGenerated', codeExample.code, codeExample.explanation);
      }, 1000);
    } catch (error) {
      console.error('‚ùå Erro ao gerar c√≥digo:', error);
      
      // Lan√ßa erro em vez de usar fallback
      throw error;
    }
  }

  /**
   * Gera c√≥digo espec√≠fico INTELIGENTE baseado na pergunta do usu√°rio
   */
  private async generateSpecificCodeExample(userMessage: string): Promise<{ code: string; explanation: string }> {
    if (!this.currentContext) throw new Error('Contexto n√£o definido');

    const { userAssessment, currentTopic } = this.currentContext;
    const adaptiveLevel = userAssessment.adaptiveLevel || 'beginner';

    const prompt = `
O usu√°rio perguntou: "${userMessage}"

CONTEXTO INTELIGENTE:
- T√≥pico atual: ${currentTopic.title}
- Linguagem: ${userAssessment.language}
- N√≠vel Adaptativo: ${adaptiveLevel}
- Experi√™ncia Geral: ${userAssessment.generalProgrammingLevel || 'basic'}
- Conhecimento da Linguagem: ${userAssessment.languageSpecificLevel || 'none'}

${adaptiveLevel === 'intermediate_syntax' ? `
üéØ ESTRAT√âGIA INTELIGENTE: SINTAXE INTERMEDI√ÅRIA
O usu√°rio entende programa√ß√£o, mas precisa da sintaxe espec√≠fica de ${userAssessment.language}.

RESPOSTA DEVE:
- Mostrar como fazer isso especificamente em ${userAssessment.language}
- Usar conceitos que ele j√° conhece
- Focar na sintaxe, n√£o na explica√ß√£o do conceito
- Incluir coment√°rios sobre diferen√ßas de outras linguagens
- Ser direta e pr√°tica
` : adaptiveLevel === 'beginner' ? `
üéØ ESTRAT√âGIA INTELIGENTE: FUNDAMENTOS
O usu√°rio √© iniciante e precisa de explica√ß√£o completa.

RESPOSTA DEVE:
- Explicar o conceito b√°sico primeiro
- Mostrar c√≥digo muito simples
- Incluir muitos coment√°rios explicativos
- Ser gradual e detalhada
` : `
üéØ ESTRAT√âGIA INTELIGENTE: CONCEITOS INTERMEDI√ÅRIOS/AVAN√áADOS
O usu√°rio tem base e quer aprofundar.

RESPOSTA DEVE:
- Mostrar exemplos mais sofisticados
- Incluir boas pr√°ticas
- Explicar o "porqu√™" das escolhas
- Ser mais concisa mas completa
`}

Crie um exemplo de c√≥digo que responda especificamente √† pergunta no n√≠vel adequado.

MUITO IMPORTANTE: 
- Responda APENAS com JSON v√°lido
- N√£o inclua texto explicativo fora do JSON
- N√£o use markdown code blocks
- Use escape de aspas duplas dentro das strings

Formato obrigat√≥rio:
{
  "code": "c√≥digo aqui com \\n para quebras de linha",
  "explanation": "explica√ß√£o aqui"
}

JSON de resposta:`;

    try {
      const result = await codeAI.generateContent(prompt);
      const responseText = result.response.text().trim();
      
      // Tentar extrair JSON do texto de resposta
      let response;
      try {
        // Remover markdown code blocks se existirem
        const cleanText = responseText.replace(/```json\s*|\s*```/g, '').trim();
        
        // Tentar fazer parse direto
        response = JSON.parse(cleanText);
      } catch (parseError) {
        console.log('‚ùå JSON parse falhou, tentando extrair JSON do texto:', responseText.substring(0, 200));
        
        // Tentar encontrar JSON no texto usando regex
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            response = JSON.parse(jsonMatch[0]);
          } catch (regexParseError) {
            console.error('‚ùå Regex JSON parse tamb√©m falhou');
            throw new Error('IA n√£o retornou JSON v√°lido');
          }
        } else {
          // Se n√£o conseguir extrair JSON, criar manualmente
          console.log('‚ö†Ô∏è Criando estrutura manual a partir do texto da IA');
          const lines = responseText.split('\n');
          const codeLines = lines.filter(line => 
            line.includes('def ') || 
            line.includes('print(') || 
            line.includes('=') || 
            line.includes('if ') ||
            line.includes('for ') ||
            line.includes('#')
          );
          
          response = {
            code: codeLines.length > 0 ? codeLines.join('\n') : `# Exemplo de ${userMessage}\nprint("Exemplo baseado em: ${userMessage}")`,
            explanation: `Aqui est√° um exemplo de ${userMessage} em ${this.currentContext?.userAssessment.language || 'Python'}`
          };
        }
      }
      
      console.log('üéØ C√≥digo espec√≠fico INTELIGENTE gerado:', {
        userMessage: userMessage.substring(0, 50),
        adaptiveLevel,
        codeLength: response.code?.length || 0
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao gerar c√≥digo espec√≠fico inteligente:', error);
      throw error; // Propagar erro em vez de usar fallback
    }
  }
  // M√©todos auxiliares...
  private addChatMessage(message: ChatMessage): void {
    this.conversationHistory.push(message);
    this.notifyObservers('onChatMessage', message);
    
    if (this.currentContext) {
      this.currentContext.recentChatHistory = this.conversationHistory.slice(-5);
    }
  }

  private async shouldReactToCode(codeSnapshot: CodeSnapshot): Promise<boolean> {
    // Crit√©rios mais inteligentes para reagir ao c√≥digo
    const codeLength = codeSnapshot.code.trim().length;
    const hasSignificantContent = codeLength > 15;
    const hasRecentChanges = this.codeHistory.length > 0 && 
      this.codeHistory[this.codeHistory.length - 1]?.code !== codeSnapshot.code;
    
    // Reagir se:
    // 1. C√≥digo tem conte√∫do significativo E houve mudan√ßas
    // 2. OU h√° erros para corrigir
    // 3. OU progresso significativo (>70% completude)
    return hasSignificantContent && (
      hasRecentChanges ||
      codeSnapshot.errors.length > 0 ||
      codeSnapshot.metrics.completeness > 70
    );
  }

  private async generateCodeReaction(codeSnapshot: CodeSnapshot): Promise<TeachingAction> {
    if (!this.currentContext) throw new Error('Contexto n√£o definido');

    const prompt = `
Voc√™ √© uma IA especializada em monitoramento de c√≥digo em tempo real. Analise o c√≥digo do estudante e gere uma resposta contextual.

PERFIL DO ESTUDANTE:
- N√≠vel: ${this.currentContext.userAssessment.level}
- Linguagem: ${this.currentContext.userAssessment.language}
- T√≥pico atual: ${this.currentContext.currentTopic.title}

C√ìDIGO ATUAL:
\`\`\`${codeSnapshot.language}
${codeSnapshot.code}
\`\`\`

AN√ÅLISE T√âCNICA:
- Linhas: ${codeSnapshot.metrics.linesOfCode}
- Completude: ${codeSnapshot.metrics.completeness}%
- Erros detectados: ${codeSnapshot.errors.length}
- √öltima mudan√ßa: agora

INSTRU√á√ïES PARA RESPOSTA:
- Se h√° progresso: reconhe√ßa especificamente o que foi feito bem
- Se h√° erros: d√™ dicas t√©cnicas precisas
- Se est√° travado: sugira pr√≥ximos passos espec√≠ficos
- Se completou algo: parabenize e sugira evolu√ß√£o
- Seja t√©cnico mas amig√°vel (m√°ximo 2 frases)
- Use emojis quando apropriado

Responda apenas a mensagem para o estudante:`;

    try {
      // Usando a IA especializada em c√≥digo (segunda chave)
      const result = await codeAI.generateContent(prompt);
      const response = result.response;
      
      return {
        type: 'chat_message',
        priority: 'medium',
        content: {
          chatMessage: {
            id: Date.now().toString(),
            type: 'ai',
            content: response.text(),
            timestamp: new Date(),
            topicId: codeSnapshot.topicId,
            messageType: 'feedback'
          }
        },
        timing: 'immediate'
      };
    } catch (error) {
      console.error('‚ùå Erro na IA de c√≥digo (chave 2):', error);
      throw error;
    }
  }

  private async executeTeachingAction(action: TeachingAction): Promise<void> {
    if (action.content.chatMessage) {
      this.addChatMessage(action.content.chatMessage);
    }
  }

  private validateCode(code: string): boolean {
    // Valida√ß√£o b√°sica do c√≥digo
    return code.trim().length > 0;
  }

  private analyzeCodeErrors(code: string): string[] {
    // An√°lise b√°sica de erros
    return [];
  }

  private calculateCodeMetrics(code: string): any {
    return {
      linesOfCode: code.split('\n').length,
      complexity: 1,
      completeness: Math.min(100, code.length / 10),
      quality: 80,
      timeSpent: 0
    };
  }
}
