import { GoogleGenerativeAI } from '@google/generative-ai';

// Duas inst√¢ncias diferentes para diferentes prop√≥sitos e evitar redund√¢ncia
const primaryGenAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || '');
const secondaryGenAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY_SECONDARY || '');

// Modelo para an√°lise r√°pida (API 1)
const analysisModel = primaryGenAI.getGenerativeModel({ 
  model: "gemini-1.5-flash",
  generationConfig: {
    temperature: 0.3,
    maxOutputTokens: 200,
  }
});

// Modelo para gera√ß√£o de conte√∫do pedag√≥gico (API 2)
const teachingModel = secondaryGenAI.getGenerativeModel({ 
  model: "gemini-1.5-pro",
  generationConfig: {
    temperature: 0.7,
    maxOutputTokens: 500,
  }
});

export interface CodeAnalysis {
  concept: string;
  progress: number;
  errors: string[];
  suggestions: string[];
  nextStep: string;
  isStuck: boolean;
  sentiment: 'frustrated' | 'progressing' | 'confident' | 'confused' | 'experimenting';
  codeQuality?: 'empty' | 'incomplete' | 'basic' | 'good' | 'excellent';
  needsHelp?: boolean;
}

export interface TeachingResponse {
  message: string;
  action: 'demonstrate' | 'hint' | 'encourage' | 'correct' | 'advance';
  codeExample?: string;
  explanation?: string;
}

class DualAITeachingService {
  private analysisHistory: string[] = [];
  private teachingContext: any = {};

  // API 1: An√°lise r√°pida do c√≥digo
  async analyzeCode(
    code: string, 
    concept: string, 
    userLevel: string,
    timeIdle: number
  ): Promise<CodeAnalysis> {
    try {
      const recentHistory = this.analysisHistory.slice(-3).join(', ');
      const codeLength = code.trim().length;
      const hasNewContent = this.isNewContent(code);
      
      const prompt = `
Analise este c√≥digo Python em rela√ß√£o ao conceito "${concept}" para um usu√°rio ${userLevel}:

C√ìDIGO ATUAL:
\`\`\`python
${code}
\`\`\`

CONTEXTO IMPORTANTE:
- Conceito sendo ensinado: ${concept}
- N√≠vel do usu√°rio: ${userLevel}
- Tempo sem digitar: ${timeIdle} segundos
- Tamanho do c√≥digo: ${codeLength} caracteres
- Conte√∫do novo: ${hasNewContent}
- Hist√≥rico recente: ${recentHistory || 'Nenhum'}

AN√ÅLISE ESPEC√çFICA:
1. O c√≥digo demonstra compreens√£o de "${concept}"?
2. H√° erros de sintaxe ou l√≥gica?
3. O usu√°rio est√° progredindo ou travado?
4. Qual o pr√≥ximo passo natural?

Responda APENAS com JSON neste formato:
{
  "concept": "${concept}",
  "progress": <0-100 baseado na compreens√£o do conceito espec√≠fico>,
  "errors": ["erro1", "erro2"] (apenas erros cr√≠ticos),
  "suggestions": ["sugest√£o1", "sugest√£o2"] (espec√≠ficas para o conceito),
  "nextStep": "pr√≥ximo passo concreto e espec√≠fico",
  "isStuck": <true se parado por mais de 30s sem progresso>,
  "sentiment": "frustrated|progressing|confident|confused|experimenting",
  "codeQuality": "empty|incomplete|basic|good|excellent",
  "needsHelp": <true se claramente precisa de ajuda>
}

Seja PRECISO e relacione tudo ao conceito "${concept}".`;

      const result = await analysisModel.generateContent(prompt);
      const response = result.response.text();
      
      // Tentar parsear JSON
      try {
        const analysis = JSON.parse(response.replace(/```json|```/g, '').trim());
        this.updateAnalysisHistory(concept, analysis.progress, analysis.sentiment);
        return analysis;
      } catch {
        // Fallback inteligente baseado no c√≥digo
        return this.createFallbackAnalysis(code, concept, timeIdle);
      }
    } catch (error) {
      console.error('Erro na an√°lise:', error);
      return this.createFallbackAnalysis(code, concept, timeIdle);
    }
  }

  // API 2: Gera√ß√£o de resposta pedag√≥gica
  async generateTeachingResponse(
    analysis: CodeAnalysis,
    userCode: string,
    conversationHistory: string[]
  ): Promise<TeachingResponse> {
    try {
      const codeLength = userCode.trim().length;
      const recentHistory = conversationHistory.slice(-2).join(' ‚Üí ');
      
      const prompt = `
Voc√™ √© um tutor de programa√ß√£o AI experiente e emp√°tico, observando o usu√°rio em TEMPO REAL.

üéØ SITUA√á√ÉO ATUAL:
Conceito: ${analysis.concept}
Progresso: ${analysis.progress}% 
Qualidade: ${analysis.codeQuality || 'indefinida'}
Estado emocional: ${analysis.sentiment}
Precisa ajuda: ${analysis.needsHelp ? 'SIM' : 'n√£o'}
Est√° travado: ${analysis.isStuck ? 'SIM' : 'n√£o'}

üìù C√ìDIGO ATUAL (${codeLength} caracteres):
\`\`\`python
${userCode}
\`\`\`

üö® PROBLEMAS IDENTIFICADOS:
${analysis.errors.length > 0 ? analysis.errors.join(', ') : 'Nenhum erro cr√≠tico'}

üí° SUGEST√ïES DA AN√ÅLISE:
${analysis.suggestions.join(' ‚Ä¢ ')}

üó£Ô∏è CONVERSA RECENTE:
${recentHistory || 'In√≠cio da conversa'}

üìã REGRAS PARA SUA RESPOSTA:
1. Seja NATURAL como um humano observando o c√≥digo
2. Reaja ESPECIFICAMENTE ao que v√™ no c√≥digo
3. Se c√≥digo vazio/pequeno: ESTIMULE a escrever
4. Se progredindo bem: ENCORAJE e sugira pr√≥ximo passo  
5. Se com erros: AJUDE de forma GENTIL e ESPEC√çFICA
6. Se travado: DEMONSTRE com c√≥digo ou dica clara
7. Use 1-2 emojis relevantes
8. M√°ximo 2 frases diretas

Responda APENAS com JSON v√°lido:
{
  "message": "sua rea√ß√£o natural e espec√≠fica ao c√≥digo atual",
  "action": "demonstrate|hint|encourage|correct|advance",
  "codeExample": "exemplo de c√≥digo apenas se a√ß√£o for demonstrate",
  "explanation": "explica√ß√£o t√©cnica breve apenas se necess√°rio"
}`;

      const result = await teachingModel.generateContent(prompt);
      const response = result.response.text();
      
      try {
        const parsed = JSON.parse(response.replace(/```json|```/g, '').trim());
        return parsed;
      } catch {
        // Fallback inteligente baseado na an√°lise
        return this.createIntelligentFallback(analysis, userCode);
      }
    } catch (error) {
      console.error('Erro na gera√ß√£o:', error);
      return this.createIntelligentFallback(analysis, userCode);
    }
  }

  // Fallback inteligente quando a API falha
  private createIntelligentFallback(analysis: CodeAnalysis, userCode: string): TeachingResponse {
    const { concept, progress, sentiment, isStuck, errors } = analysis;
    
    // Resposta baseada no contexto da an√°lise
    if (isStuck || sentiment === 'frustrated') {
      return {
        message: `Vejo que voc√™ parou em ${concept}. Que tal eu te dar um exemplo pr√°tico? ü§î`,
        action: 'demonstrate',
        explanation: 'O usu√°rio parece precisar de ajuda'
      };
    }
    
    if (errors.length > 0) {
      return {
        message: `Quase l√°! ${errors[0]}. Continue tentando! üí™`,
        action: 'hint',
        explanation: 'Corrigindo erros detectados'
      };
    }
    
    if (progress >= 80) {
      return {
        message: `Excelente trabalho com ${concept}! Vamos avan√ßar? üöÄ`,
        action: 'advance',
        explanation: 'Usu√°rio demonstrou dom√≠nio do conceito'
      };
    }
    
    if (progress > 50) {
      return {
        message: `√ìtimo progresso! Voc√™ est√° entendendo ${concept} muito bem! üëç`,
        action: 'encourage',
        explanation: 'Encorajando progresso positivo'
      };
    }
    
    if (userCode.trim().length === 0) {
      return {
        message: `Vamos come√ßar com ${concept}! Posso te mostrar um exemplo?`,
        action: 'demonstrate',
        explanation: 'Iniciando com demonstra√ß√£o'
      };
    }
    
    // Fallback padr√£o
    return {
      message: `Continue explorando ${concept}! Voc√™ est√° no caminho certo! ‚ú®`,
      action: 'encourage',
      explanation: 'Encorajamento geral'
    };
  }

  // Estimativa local de progresso (backup)
  private estimateProgress(code: string, concept: string): number {
    const checks = {
      variables: [
        code.includes('=') && !code.includes('=='),
        code.includes('print('),
        code.split('\n').length > 2
      ],
      conditionals: [
        code.includes('if '),
        code.includes(':'),
        code.includes('else') || code.includes('elif')
      ],
      loops: [
        code.includes('for ') || code.includes('while '),
        code.includes(':'),
        code.includes('range(') || code.includes(' in ')
      ],
      functions: [
        code.includes('def '),
        code.includes('return'),
        code.includes('(') && code.includes(')')
      ]
    };

    const conceptChecks = checks[concept as keyof typeof checks] || [];
    const completed = conceptChecks.filter(Boolean).length;
    return Math.round((completed / Math.max(conceptChecks.length, 1)) * 100);
  }

  private generateFallbackMessage(analysis: CodeAnalysis): string {
    if (analysis.isStuck) {
      return "Vejo que voc√™ parou um pouco. Quer uma dica? ü§î";
    }
    if (analysis.progress > 70) {
      return "Excelente! Voc√™ est√° quase terminando! üöÄ";
    }
    if (analysis.errors.length > 0) {
      return "Quase l√°! S√≥ ajustar alguns detalhes. üí™";
    }
    return "√ìtimo progresso! Continue assim! üëç";
  }

  // M√©todos auxiliares para an√°lise mais contextualizada
  private lastCodeSnapshot: string = '';
  
  private isNewContent(code: string): boolean {
    const hasNew = code.trim() !== this.lastCodeSnapshot.trim();
    this.lastCodeSnapshot = code;
    return hasNew;
  }

  private updateAnalysisHistory(concept: string, progress: number, sentiment: string): void {
    const entry = `${concept}-${progress}%-${sentiment}`;
    this.analysisHistory.push(entry);
    
    // Manter apenas os √∫ltimos 5 entries
    if (this.analysisHistory.length > 5) {
      this.analysisHistory = this.analysisHistory.slice(-5);
    }
  }

  private createFallbackAnalysis(code: string, concept: string, timeIdle: number): CodeAnalysis {
    const codeLength = code.trim().length;
    const hasCode = codeLength > 0;
    const seemsStuck = timeIdle > 30 && codeLength < 10;
    
    // An√°lise b√°sica baseada em padr√µes
    let progress = 0;
    if (hasCode) {
      progress = Math.min(80, Math.floor(codeLength / 5) + 10);
    }
    
    let sentiment: 'frustrated' | 'progressing' | 'confident' | 'confused' | 'experimenting' = 'progressing';
    if (seemsStuck) sentiment = 'confused';
    if (progress > 60) sentiment = 'confident';
    if (timeIdle > 60) sentiment = 'frustrated';
    
    return {
      concept,
      progress,
      errors: [],
      suggestions: hasCode ? ['Continue desenvolvendo o conceito'] : ['Comece escrevendo algum c√≥digo'],
      nextStep: hasCode ? `Melhore o c√≥digo para demonstrar ${concept}` : `Escreva c√≥digo para praticar ${concept}`,
      isStuck: seemsStuck,
      sentiment,
      codeQuality: hasCode ? 'basic' : 'empty',
      needsHelp: seemsStuck || timeIdle > 45
    };
  }

  // Limpar hist√≥rico periodicamente
  clearHistory() {
    this.analysisHistory = [];
    this.teachingContext = {};
  }
}

export const dualAI = new DualAITeachingService();
