/**
 * Sistema de Avalia√ß√£o e Gera√ß√£o de Curr√≠culo Personalizado
 * Arquitetura: Factory Pattern + Strategy Pattern
 */

import { GoogleGenerativeAI } from '@google/generative-ai';
import { 
  UserAssessment, 
  PersonalizedCurriculum, 
  LearningTopic,
  AdaptationRule 
} from '@/types/learningSystem';

const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || '');

// Factory para cria√ß√£o de curr√≠culos personalizados
export class CurriculumFactory {
  private static assessmentAnalyzer = genAI.getGenerativeModel({ 
    model: "gemini-2.0-pro",
    generationConfig: {
      temperature: 0.3, // Baixa para an√°lises consistentes
      maxOutputTokens: 1500,
    }
  });

  private static topicGenerator = genAI.getGenerativeModel({ 
    model: "gemini-2.0-flash",
    generationConfig: {
      temperature: 0.7, // Criatividade balanceada para t√≥picos
      maxOutputTokens: 2000,
    }
  });

  /**
   * Analisa as respostas do assessment e determina perfil INTELIGENTE do usu√°rio
   * Diferencia entre experi√™ncia geral e conhecimento espec√≠fico da linguagem
   */
  static async analyzeAssessment(responses: string[], language: string): Promise<UserAssessment> {
    const prompt = `
Analise estas 3 respostas de avalia√ß√£o inicial para ${language}:

RESPOSTA 1 (Experi√™ncia): "${responses[0]}"
RESPOSTA 2 (Objetivos): "${responses[1]}"  
RESPOSTA 3 (Conhecimento Pr√©vio): "${responses[2]}"

AN√ÅLISE INTELIGENTE REQUERIDA:
Determine separadamente:
1. EXPERI√äNCIA GERAL em programa√ß√£o (conceitos, l√≥gica, estruturas)
2. CONHECIMENTO ESPEC√çFICO da linguagem ${language} (sintaxe, bibliotecas, idiomas)
3. N√çVEL ADAPTATIVO para ensino (baseado na combina√ß√£o dos dois)

Responda APENAS em JSON:

{
  "generalProgrammingLevel": "none|basic|intermediate|advanced",
  "languageSpecificLevel": "none|basic|intermediate|advanced", 
  "adaptiveLevel": "beginner|intermediate_syntax|intermediate_concepts|advanced",
  "level": "beginner|intermediate|advanced",
  "experience": "descri√ß√£o resumida da experi√™ncia",
  "interests": ["interesse1", "interesse2", "interesse3"],
  "previousKnowledge": ["conceito1", "conceito2"],
  "learningStyle": "visual|practical|theoretical|mixed",
  "goals": ["objetivo1", "objetivo2"],
  "timeAvailable": "low|medium|high",
  "programmingExperienceYears": 0-20,
  "languageExperienceLevel": "never_used|basic_syntax|some_projects|professional"
}

CRIT√âRIOS INTELIGENTES:
- generalProgrammingLevel: Experi√™ncia com conceitos de programa√ß√£o em QUALQUER linguagem
- languageSpecificLevel: Conhecimento espec√≠fico de ${language}
- adaptiveLevel: 
  * "beginner": N√£o sabe programar OU novo em tudo
  * "intermediate_syntax": Sabe programar, mas novo na linguagem (FOCO EM SINTAXE)
  * "intermediate_concepts": Alguma experi√™ncia na linguagem, precisa aprofundar
  * "advanced": Experiente na linguagem espec√≠fica
- level: N√≠vel geral para compatibilidade
- programmingExperienceYears: Anos aproximados de experi√™ncia
- languageExperienceLevel: Experi√™ncia espec√≠fica na linguagem

EXEMPLO - Usu√°rio que sabe Java mas quer aprender Python:
{
  "generalProgrammingLevel": "intermediate", 
  "languageSpecificLevel": "none",
  "adaptiveLevel": "intermediate_syntax",
  "level": "intermediate"
}`;

    try {
      const result = await this.assessmentAnalyzer.generateContent(prompt);
      const analysis = JSON.parse(result.response.text().replace(/```json|```/g, '').trim());
      
      return {
        id: Date.now().toString(),
        language,
        level: analysis.level,
        experience: analysis.experience,
        interests: analysis.interests,
        previousKnowledge: analysis.previousKnowledge,
        learningStyle: analysis.learningStyle,
        goals: analysis.goals,
        timeAvailable: analysis.timeAvailable,
        completedAt: new Date(),
        // Novos campos inteligentes
        generalProgrammingLevel: analysis.generalProgrammingLevel,
        languageSpecificLevel: analysis.languageSpecificLevel,
        adaptiveLevel: analysis.adaptiveLevel,
        programmingExperienceYears: analysis.programmingExperienceYears,
        languageExperienceLevel: analysis.languageExperienceLevel
      };
    } catch (error) {
      console.error('Erro na an√°lise do assessment:', error);
      // Fallback inteligente
      return this.createIntelligentFallbackAssessment(language, responses);
    }
  }

  /**
   * Gera curr√≠culo personalizado baseado no assessment INTELIGENTE
   */
  static async generatePersonalizedCurriculum(assessment: UserAssessment): Promise<PersonalizedCurriculum> {
    const prompt = `
Crie um curr√≠culo INTELIGENTEMENTE ADAPTADO de ${assessment.language} para este perfil:

AN√ÅLISE INTELIGENTE DO USU√ÅRIO:
- Experi√™ncia Geral em Programa√ß√£o: ${assessment.generalProgrammingLevel || 'basic'}
- Conhecimento Espec√≠fico de ${assessment.language}: ${assessment.languageSpecificLevel || 'none'}
- N√≠vel Adaptativo: ${assessment.adaptiveLevel || 'beginner'}
- Anos de Experi√™ncia: ${assessment.programmingExperienceYears || 0}
- Experi√™ncia na Linguagem: ${assessment.languageExperienceLevel || 'never_used'}

PERFIL COMPLEMENTAR:
- N√≠vel Geral: ${assessment.level}
- Experi√™ncia: ${assessment.experience}
- Interesses: ${assessment.interests.join(', ')}
- Conhecimento Pr√©vio: ${assessment.previousKnowledge.join(', ')}
- Estilo de Aprendizado: ${assessment.learningStyle}
- Objetivos: ${assessment.goals.join(', ')}
- Tempo Dispon√≠vel: ${assessment.timeAvailable}

INSTRU√á√ïES INTELIGENTES DE GERA√á√ÉO:

${assessment.adaptiveLevel === 'intermediate_syntax' ? `
üéØ FOCO: SINTAXE DA LINGUAGEM (usu√°rio sabe programar, mas novo na linguagem)
- Priorize sintaxe espec√≠fica de ${assessment.language}
- Use conceitos de programa√ß√£o que ele j√° conhece
- Mostre equival√™ncias com outras linguagens quando relevante
- Evite conceitos b√°sicos de programa√ß√£o (j√° sabe)
- Foque em idiomas e conven√ß√µes da linguagem
- Exemplos pr√°ticos de convers√£o de conceitos
` : assessment.adaptiveLevel === 'intermediate_concepts' ? `
üéØ FOCO: CONCEITOS INTERMEDI√ÅRIOS (tem base na linguagem)
- Aprofunde conceitos espec√≠ficos da linguagem
- Padr√µes de design apropriados
- Melhores pr√°ticas e conven√ß√µes
- Ferramentas e ecossistema
- Projetos pr√°ticos
` : assessment.adaptiveLevel === 'advanced' ? `
üéØ FOCO: T√ìPICOS AVAN√áADOS (experiente na linguagem)
- Otimiza√ß√£o e performance
- Arquitetura de software
- Padr√µes avan√ßados
- Ferramentas profissionais
- Projetos complexos
` : `
üéØ FOCO: FUNDAMENTOS COMPLETOS (iniciante total)
- Conceitos b√°sicos de programa√ß√£o
- Sintaxe fundamental
- L√≥gica de programa√ß√£o
- Resolu√ß√£o de problemas
- Pr√°tica gradual
`}

Crie 8-12 t√≥picos espec√≠ficos para este perfil inteligente.
Ordene por dificuldade e depend√™ncias.
Adapte baseado no n√≠vel adaptativo detectado.

Responda APENAS em JSON:
{
  "topics": [
    {
      "title": "Nome do T√≥pico",
      "description": "Descri√ß√£o detalhada do que ser√° aprendido",
      "type": "concept|exercise|project|challenge",
      "difficulty": 1-5,
      "estimatedTime": minutos,
      "prerequisites": ["t√≥pico1", "t√≥pico2"],
      "learningObjectives": ["objetivo1", "objetivo2", "objetivo3"],
      "tags": ["tag1", "tag2"],
      "priority": 1-10,
      "adaptiveLevel": "${assessment.adaptiveLevel || 'beginner'}",
      "focusArea": "syntax|concepts|advanced|fundamentals"
    }
  ],
  "estimatedCompletionTime": total_em_minutos,
  "adaptationRules": [
    {
      "condition": "if struggling with X",
      "action": "provide_hint|skip|reinforce|change_approach",
      "parameters": {"detail": "valor"}
    }
  ]
}

EXEMPLOS por n√≠vel adaptativo:
- beginner: Variables, Input/Output, Conditionals, Loops
- intermediate_syntax: ${assessment.language} Syntax, Data Structures in ${assessment.language}, ${assessment.language} Idioms  
- intermediate_concepts: Advanced Functions, OOP in ${assessment.language}, Error Handling
- advanced: Design Patterns, Performance, Testing, Architecture`;

    try {
      const result = await this.topicGenerator.generateContent(prompt);
      const curriculumData = JSON.parse(result.response.text().replace(/```json|```/g, '').trim());
      
      // Adiciona IDs √∫nicos para cada t√≥pico
      const topicsWithIds = curriculumData.topics.map((topic: any, index: number) => ({
        id: `topic_${Date.now()}_${index}`,
        ...topic
      }));

      return {
        id: `curriculum_${Date.now()}`,
        userId: assessment.id,
        language: assessment.language,
        level: assessment.level,
        topics: topicsWithIds,
        currentTopicIndex: 0,
        estimatedCompletionTime: curriculumData.estimatedCompletionTime,
        adaptationRules: curriculumData.adaptationRules,
        createdAt: new Date(),
        lastUpdated: new Date()
      };
    } catch (error) {
      console.error('Erro na gera√ß√£o do curr√≠culo:', error);
      return this.createFallbackCurriculum(assessment);
    }
  }

  /**
   * Fallback inteligente para assessment
   */
  private static createIntelligentFallbackAssessment(language: string, responses: string[]): UserAssessment {
    // An√°lise b√°sica das respostas para fallback inteligente
    const hasExperience = responses.some(r => 
      r.toLowerCase().includes('java') || 
      r.toLowerCase().includes('python') || 
      r.toLowerCase().includes('javascript') ||
      r.toLowerCase().includes('programa√ß√£o') ||
      r.toLowerCase().includes('c√≥digo') ||
      r.toLowerCase().includes('anos')
    );

    const isNewToLanguage = responses.some(r => 
      r.toLowerCase().includes('novo') || 
      r.toLowerCase().includes('come√ßando') ||
      r.toLowerCase().includes('nunca') ||
      r.toLowerCase().includes('primeiro')
    );

    let adaptiveLevel: 'beginner' | 'intermediate_syntax' | 'intermediate_concepts' | 'advanced';
    let generalLevel: 'none' | 'basic' | 'intermediate' | 'advanced';
    let languageLevel: 'none' | 'basic' | 'intermediate' | 'advanced';

    if (hasExperience && isNewToLanguage) {
      // Sabe programar mas novo na linguagem
      adaptiveLevel = 'intermediate_syntax';
      generalLevel = 'intermediate';
      languageLevel = 'none';
    } else if (hasExperience) {
      // Tem experi√™ncia geral
      adaptiveLevel = 'intermediate_concepts';
      generalLevel = 'intermediate';
      languageLevel = 'basic';
    } else {
      // Iniciante completo
      adaptiveLevel = 'beginner';
      generalLevel = 'none';
      languageLevel = 'none';
    }

    return {
      id: Date.now().toString(),
      language,
      level: adaptiveLevel === 'beginner' ? 'beginner' : 'intermediate',
      experience: hasExperience ? 'Tem experi√™ncia em programa√ß√£o' : 'Iniciante em programa√ß√£o',
      interests: ['programa√ß√£o b√°sica', 'resolu√ß√£o de problemas'],
      previousKnowledge: hasExperience ? ['conceitos b√°sicos'] : [],
      learningStyle: 'mixed',
      goals: ['aprender programa√ß√£o', 'resolver problemas'],
      timeAvailable: 'medium',
      completedAt: new Date(),
      // Campos inteligentes
      generalProgrammingLevel: generalLevel,
      languageSpecificLevel: languageLevel,
      adaptiveLevel: adaptiveLevel,
      programmingExperienceYears: hasExperience ? 2 : 0,
      languageExperienceLevel: 'never_used'
    };
  }

  /**
   * Assessment padr√£o para fallback
   */
  private static createFallbackAssessment(language: string): UserAssessment {
    return {
      id: Date.now().toString(),
      language,
      level: 'beginner',
      experience: 'Iniciante em programa√ß√£o',
      interests: ['programa√ß√£o b√°sica', 'resolu√ß√£o de problemas'],
      previousKnowledge: [],
      learningStyle: 'mixed',
      goals: ['aprender programa√ß√£o', 'resolver problemas'],
      timeAvailable: 'medium',
      completedAt: new Date()
    };
  }

  /**
   * Curr√≠culo padr√£o para fallback
   */
  private static createFallbackCurriculum(assessment: UserAssessment): PersonalizedCurriculum {
    const basicTopics: LearningTopic[] = [
      {
        id: 'topic_variables',
        title: 'Vari√°veis e Tipos de Dados',
        description: 'Aprenda a criar e usar vari√°veis, entenda diferentes tipos de dados',
        type: 'concept',
        difficulty: 1,
        estimatedTime: 30,
        prerequisites: [],
        learningObjectives: ['Criar vari√°veis', 'Entender tipos de dados', 'Usar vari√°veis em c√≥digo'],
        tags: ['fundamentals', 'variables'],
        priority: 10
      },
      {
        id: 'topic_conditionals',
        title: 'Estruturas Condicionais',
        description: 'Tome decis√µes no seu c√≥digo usando if, else e elif',
        type: 'concept',
        difficulty: 2,
        estimatedTime: 45,
        prerequisites: ['Vari√°veis e Tipos de Dados'],
        learningObjectives: ['Usar if/else', 'Combinar condi√ß√µes', 'Resolver problemas com l√≥gica'],
        tags: ['logic', 'conditionals'],
        priority: 9
      }
    ];

    return {
      id: `curriculum_${Date.now()}`,
      userId: assessment.id,
      language: assessment.language,
      level: assessment.level,
      topics: basicTopics,
      currentTopicIndex: 0,
      estimatedCompletionTime: 120,
      adaptationRules: [
        {
          condition: 'struggling_with_concept',
          action: 'provide_hint',
          parameters: { type: 'explanatory' }
        }
      ],
      createdAt: new Date(),
      lastUpdated: new Date()
    };
  }

  /**
   * Adapta curr√≠culo baseado no progresso
   */
  static async adaptCurriculum(
    curriculum: PersonalizedCurriculum, 
    progressData: any
  ): Promise<PersonalizedCurriculum> {
    // Implementar l√≥gica de adapta√ß√£o baseada no progresso
    // Por exemplo: ajustar dificuldade, reordenar t√≥picos, adicionar refor√ßos
    
    const updatedCurriculum = { ...curriculum };
    updatedCurriculum.lastUpdated = new Date();
    
    // Aqui voc√™ pode implementar regras de adapta√ß√£o mais complexas
    // baseadas nos dados de progresso do usu√°rio
    
    return updatedCurriculum;
  }
}

/**
 * Service para gerenciar assessments e curr√≠culos
 */
export class LearningPathService {
  private static assessments = new Map<string, UserAssessment>();
  private static curricula = new Map<string, PersonalizedCurriculum>();

  static async processAssessment(responses: string[], language: string): Promise<{
    assessment: UserAssessment;
    curriculum: PersonalizedCurriculum;
  }> {
    // 1. Analisa as respostas
    const assessment = await CurriculumFactory.analyzeAssessment(responses, language);
    
    // 2. Gera curr√≠culo personalizado
    const curriculum = await CurriculumFactory.generatePersonalizedCurriculum(assessment);
    
    // 3. Armazena na mem√≥ria (em produ√ß√£o, seria banco de dados)
    this.assessments.set(assessment.id, assessment);
    this.curricula.set(curriculum.id, curriculum);
    
    return { assessment, curriculum };
  }

  static getAssessment(id: string): UserAssessment | undefined {
    return this.assessments.get(id);
  }

  static getCurriculum(id: string): PersonalizedCurriculum | undefined {
    return this.curricula.get(id);
  }

  static updateCurriculum(curriculum: PersonalizedCurriculum): void {
    this.curricula.set(curriculum.id, curriculum);
  }
}
